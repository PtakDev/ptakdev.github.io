[ { "title": "Updating State in Terraform Enterprise", "url": "/posts/update-tfstae-in-terraform-enterprise/", "categories": "Guides, Terraform", "tags": "terraform, terraform enterprise, tfe, tfstate", "date": "2022-08-04 09:00:00 +0200", "snippet": "Updating State in Terraform EnterpriseStep 1. Login to your organization terraformIf you are already looged in go to the next step.terraform login &lt;HOSTNAME&gt;After executing this command, the explorer should open and it will allow you to create a token. You need to copy the token and paste it in shell. Save the token somwhere safe, as you wont be able to see it again.Step 2. Crete new working directoryCrete new working directory and inside this directory create new file called ‘provider.tf’.Step 3. Update ‘provider.tf’ fileInside this file you will have to specify the hostname, name of your organization and workspace.terraform { backend \"remote\" { hostname = \"&lt;HOSTNAME&gt;\" organization = \"&lt;ORGANIZATION_NAME&gt;\" workspaces { name = \"&lt;WORKSPACE_NAME&gt;\" } }}Step 4. Initialize terraformAfter saving the file, we need to open terminal and navigate to our working directory. When we are in it, we need to init terraform.terraform initStep 5. Copy over .tfstate fileOnce this process is finished, we need to move .tfstate file to our working directory.Step 6. Update the stateWhen we have .tfstate file in our working directory, we can push the file using below command.terraform state push &lt;FILE_NAME&gt;.tfstateStep 7. Verify the changeOpen your TFE and navigate to Organization → Workspaces → Workspace → States. Here you should be able to se new state. The name of the state should start with New state #......Now, you should be able run Plan without any probles." }, { "title": "Running Portainer in Docker with docker-compose", "url": "/posts/running-portainer-in-docker-with-docker-compose/", "categories": "Docker, Portainer", "tags": "portainer, docker, docker-compose, ubuntu 20.04", "date": "2022-06-21 19:20:00 +0200", "snippet": "docker-compose.yamlversion: '3.3'services: portainer: # You can change the tag `latest` to a specific version e.g. `2.13.1` image: portainer/portainer-ce:latest container_name: portainer restart: unless-stopped ports: # Expose HTTP port if required # - 9000:9000 # Expose a TCP tunnel server over port 8000 # - 8000:8000 - 9443:9443 volumes: - /etc/localtime:/etc/localtime:ro - /var/run/docker.sock:/var/run/docker.sock:ro # Change ./portainer-data to directory where you want to keep portainer data on local machine - ./portainer-data:/data After running a Pontainer for the first time you will have to create a admin user. To access your Portainer Server please use HTTPS protocol. Example: https://localhost:9443ReferencesPortainer Community Edition imagePortainer Documentation" }, { "title": "Running Jenkins in Docker with docker-compose", "url": "/posts/running-jenkins-in-docker-with-docker-compose/", "categories": "Docker, Jenkins", "tags": "jenkins, docker, docker-compose, ubuntu 20.04, ssh", "date": "2022-06-17 11:30:00 +0200", "snippet": " I recomend to read the full guide published on CloudBees blog How to Install and Run Jenkins With Docker Compose If you trying to run any of the shell commands and you are getting failed: Permission denied, just put sudo in front of the command you are trying to run.Create docker-compose fileTo retain all data even when the container is stopped, started, or deleted, we need to create an explicit volume for it.version: '3.3'services: jenkins: image: jenkins/jenkins:latest privileged: true user: root ports: - 8080:8080 - 50000:50000 container_name: jenkins volumes: - /home/${myname}/jenkins_compose/jenkins_configuration:/var/jenkins_home - /var/run/docker.sock:/var/run/docker.sock Change /home/${myname} to your user’s home directory or the path you created the new directory in./home/${myname}/jenkins_compose/jenkins_configuration is mapped to /var/jenkins_home in the container.Run Jenkins controller docker-compose up -dWhen creating Jenkins it’s done, you can open Jenkins site in your browser. If you are running it in you local environment it should be localhost:8080Initial Jenkins configurationFollow the instructions on the browser screen to: Unlock Jenkins Print the password in the console without having to exec into the container by executing one of below commands command:sudo docker exec ${CONTAINER_ID or CONTAINER_NAME} cat /var/jenkins_home/secrets/initialAdminPassworddocker logs jenkins | less Install suggested plugins Create the first admin user Add Jenkins Agent and define itGenerate an SSH keyTwo files are going to be generated executing below command; jenkins_agent, with the private key, and jenkins-agent.pub, with the public key.ssh-keygen -t rsa -f jenkins_agentCopy private key.cat jenkins_agentAdd credentialsStep 1. In our Jenkins Dashboard, we need to navigate to Manage Jenkins → Manage Credentials.Step 2. Here under Store click Jenkins.Step 3. Now under Domain click Global credentials (unrestricted).Step 4. Select Add credentials.Step 5. Set these options on this screen. Select SSH Username with private key. Limit the scope to System. This means the key can’t be used for jobs. Give the credential an ID. Provide a description. Enter jenkins for a username. Don’t use the username used to create the key. Under Private Key, check Enter directly. Paste the contents of jenkins_agent in the text box.Set up the agentStep 1. Get the contents of the jenkins_agent.pub.cat jenkins_agent.pubStep 2. Stop Jenkins.docker-compose downStep 3. Add a agent to docker-compose.version: '3.3'services: jenkins: image: jenkins/jenkins:latest privileged: true user: root ports: - 8080:8080 - 50000:50000 container_name: jenkins volumes: - /home/${myname}/jenkins_compose/jenkins_configuration:/var/jenkins_home - /var/run/docker.sock:/var/run/docker.sock agent: image: jenkins/ssh-agent:jdk11 privileged: true user: root container_name: agent expose: - 22 environment: - JENKINS_AGENT_SSH_PUBKEY=&lt;JENKINS_AGENT.PUB_CONENTS&gt; Replace &lt;JENKINS_AGENT.PUB_CONENTS&gt; with the contetnts of jenkins_agent.pub file.Step 4. Run JenkinsMake sure you are in the directory that contains right docker-compose.yaml file. docker-compose up -d To check if the Jenkins controller and agent are running you can execute docker ps command. You should be able to see our containers lister there.Define new Jenkins agent1. In our Jenkins Dashboard, we need to navigate to Manage Jenkins → Manage Nodes and Clouds and click New Node.2. Give your agent a name and set the Remote root directory to /home/jenkins/agent.3. In the next part of the form under Usage, select Use this node as much as possible.4. Under Launch method, select Launch agents via SSH.5. For Host, enter agent.6. Under Credentials, select the one created earlier.7. Under Host Key Verification Strategy, select Non verifying Verification Strategy.8. Click Advanced on the right.9. Set the JavaPath to /opt/java/openjdk/bin/java.10. Click Save.To verify if the Agent is successfully connected and online go to Log and look for output Agent successfully connected and online. I came across an Error Agent JVM has terminated. Exit code=127 docker while trying to run the agent. I had to get inside of the jenkins container and get the java path. To get inside the container execute docker exec -it &lt;CONTAINER_NAME&gt; bash, and inside of the container execute whereis java. Copy the path and edit JavaPath from point 9. To close the container shell type exit.Everything is now up and running! It’s highly advisable to not run any builds on the built-in node, instead using agents to run builds. To prevent builds from running on the built-in node directly, navigate to Manage Jenkins → Manage Nodes and Clouds. Select Built-In Node in the list, then select Configure in the menu. Set the number of executors to 0 and save. You can read more about it hereReferencesHow to Install and Run Jenkins With Docker ComposeJenkins Docker imageJenkins Docker documentationUsing Jenkins agentsController Isolation" }, { "title": "Setting up comments on Jekyll site with Chirpy theme", "url": "/posts/setting-up-comments-on-jekyll-site-with-chirpy-theme/", "categories": "Docs, Chirpy", "tags": "jekyll, comments, giscus, chirpy", "date": "2022-06-16 17:30:00 +0200", "snippet": "The process of setting up comments on Jekyll site with Chirpy theme is much easier than I could expect.Step 1. Go to giscus site.Step 2. Choose the repositoryIn the Configuration section, choose the website repo that giscus will connect to. As specified, we need to make sure that: The repository is public, otherwise visitors will not be able to view the discussion. The giscus app is installed, otherwise visitors will not be able to comment and react. The Discussions feature is turned on by enabling it for your repository.When all criteria are meet, you will see above notification.We also have to change Discussion Category. I have used recommended Announcments category.You can leave the rest of the options as Default.Step 3. Find section Enable giscus, on the site.You will find code similar to below.&lt;script src=\"https://giscus.app/client.js\" data-repo=\"&lt;GH_USERNAME&gt;/&lt;GH_USERNAME&gt;.github.io\" data-repo-id=\"&lt;REPO_ID&gt;\" data-category=\"Announcements\" data-category-id=\"&lt;ID_CATEGORY&gt;\" data-mapping=\"pathname\" data-reactions-enabled=\"1\" data-emit-metadata=\"0\" data-input-position=\"bottom\" data-theme=\"dark\" data-lang=\"en\" crossorigin=\"anonymous\" async&gt;&lt;/script&gt;Step 4. Edit _config.yml file.Scroll down to section comments in _config.yml and in line active type giscus.Now, under giscus section go to the repo line and type &lt;GH_USERNAME&gt;/&lt;GH_USERNAME&gt;.github.io and then in repo_id paste the value of data-repo-id from the prevoius point. In category type value of data-category from gisgus site and do same for category_id but use value of data-category-id.Your settings should look something like that.comments: active: giscus disqus: shortname: utterances: repo: issue_term: # Giscus options › https://giscus.app giscus: repo: &lt;GH_USERNAME&gt;/&lt;GH_USERNAME&gt;.github.io repo_id: &lt;REPO_ID&gt; category: Announcements category_id: &lt;ID_CATEGORY&gt; mapping: # optional, default to 'pathname' input_position: # optional, default to 'bottom' lang: # optional, default to the value of `site.lang` You can turn off comments in any post. All you have to do is add comments: false to the Front Matter." }, { "title": "Markdown and Chirpy notes", "url": "/posts/mardown-language-notes/", "categories": "Notes, Markdown", "tags": "markdown, chirpy, jekyll", "date": "2022-06-16 15:00:00 +0200", "snippet": "Languages for code blocks:Source Language Available language mode(s) ASP.NET asp aspx C c C++ c++ cpp cplusplus C# cs csharp Clojure clj cljc cljx clojure CSS css less sass scss styl stylus cURL curl D d Dart dart Diff diff Docker dockerfile Erlang erl erlang Go go GraphQL gql graphql Groovy gradle groovy Handlebars handlebars hbs HTML/XML html xhtml xml HTTP http Java java JavaScript coffeescript ecmascript javascript js node JSX jsx JSON json Julia jl julia Kotlin kotlin kt Liquid liquid Lua lua Markdown markdown Objective-C objc objectivec Objective-C++ objc++ objcpp objectivecpp objectivecplusplus OCaml ocaml ml Perl perl pl PHP php PowerShell powershell ps1 Python py python R r React jsx Ruby jruby macruby rake rb rbx ruby Rust rs rust Scala scala Shell bash sh shell zsh Solidity sol solidity SQL cql mssql mysql plsql postgres postgresql pgsql sql Swift swift TypeScript ts typescript YAML yaml  yml Table:Code:| Left | Center | Right ||:-----|:--------:|------:|| L0 | **bold** | $1600 || L1 | `code` | $12 || L2 | _italic_ | $1 |Result: Left Center Right L0 bold $1600 L1 code $12 L2 italic $1 Hyperlinks:Aadding {:target=\"_blank\"} after the link, opens it in new tab after cliking it.Code:[`Twitter`](https://twitter.com/){:target=\"_blank\"}[Twitter](https://twitter.com/){:target=\"_blank\"}Result:TwitterTwitterPrompts:Code:&gt; This is `tip`.{: .prompt-tip }&gt; This is `info`.{: .prompt-info }&gt; This is `waning`.{: .prompt-warning }&gt; This is `danger`.{: .prompt-danger }Result: This is tip. This is info. This is waning. This is danger.Arrows Up arrow (↑): &amp;uarr; Down arrow (↓): &amp;darr; Left arrow (←): &amp;larr; Right arrow (→): &amp;rarr; Double headed arrow (↔): &amp;harr;ReferencesChirpy DemoLanguage Support for code blocks" }, { "title": "Setting up Jekyll site with Chirpy theme", "url": "/posts/setting-up-jekyll-with-chirpy-theme/", "categories": "Docs, Chirpy", "tags": "jekyll, ubuntu 20.04, chirpy", "date": "2022-06-16 11:00:00 +0200", "snippet": " I have followerd TechnoTim YouTube video to set up this website and host it on a GitHub site. I am running Jekyll on local enviroment on Ubuntu 20.04 Virtual Machine and I am using VS Code on my local Windows machine, with the Remote - SSH extension to edit files locatet in VM.Requirements:GitHub, Bundler, Ubuntu VMSetting up Local enviromentStep 1. Copy Chirpy repositoryCreate new repository from the Chirpy Starter, and name it .github.io, where GH_USERNAME represents your GitHub username.Step 2. Clone repo to localgit clone git@github.com:&lt;GH_USERNAME&gt;/&lt;GH_USERNAME&gt;.github.io.gitStep 3. Install DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:bundle To install Bundler, I had to edit a /etc/gai.conf file as I had some probles with IPv6 setup. I added precedence 2a04:4e42::0/32 5 to it. You can read more in this Stackoverflow post.Step 4. Run site localRun the following command in the root directory of the site:bundle exec jekyll s I had to install ruby-dev package in order to meke everything work.Creating your first postStep 1. Edit _config.yml file.Locate the _config.yml file and open it. We need to change few settings.# Change to your timezone › http://www.timezoneconverter.com/cgi-bin/findzone/findzonetimezone: Europe/Madridtitle: Site Title # the main titletagline: Site Sub-Title # it will display as the sub-titledescription: &gt;- # used by seo meta and the atom feed Website description.# fill in the protocol &amp; hostname for your site, e.g., 'https://username.github.io'url: 'https://&lt;GH_USERNAME&gt;.github.io'github: username: &lt;GH_USERNAME&gt; # change to your github usernametwitter: username: &lt;TW_USERNAME&gt; # change to your twitter username These are just some of the basic settings examples. You adjust the options accoringly to your needs.Step 2. Create markdown fileIn VS Code, locate a floder _post and create new .md file. You can copy and paste below for tests.---title: My first postdate: 2021-06-15 12:45:00 +0100categories: [Docs]tags: [tag] # TAG names should always be lowercase---### This is H3 Title Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse vestibulum tellus tristique nibh imperdiet pellentesque. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed a ipsum a massa pulvinar eleifend. Pellentesque sodales feugiat eros non mattis. In et augue non urna porttitor vestibulum ornare sit amet ligula.Step 3. Save the file and refresh your website.You should be able to see your post on the home page.Hosting the site on GiHubStep 1. Make sure your repo is public on GitHub.Step 2. Commit yout code to GitHub.git add .git commit -m \"First post: My fist post\"git pushAfter you pushed your code to GitHub, you should be able to see in GitHub, in tab Actions of your repo, workflow running. When it’s finished, go to Step 3.Step 3. Change GitHub Pages sourceGo to the setting of your repository and on the left site panel choose Pages. Next you need to find Source seection and change the branch to gh-pages and press Save.Step 4. Go to your website!ReferencesChirpyBundlerMeet Jekyll - The Static Site Generator" }, { "title": "SSH to Ubuntu machine from Windows", "url": "/posts/ssh-to-ubuntu-from-windows/", "categories": "Docs, Windows", "tags": "windows, ubuntu 20.04, ssh, powershell", "date": "2022-06-15 13:45:00 +0200", "snippet": "1.On the Ubuntu machine, open a terminal and generate private and public keys.ssh-keygen -t rsa2.Now we need to copy public key from Linux to our Windows machine that we will be logging from.scp id_rsa.pub &lt;UBUNTU_USER&gt;@&lt;IP_UBUNTU&gt;:.ssh/authorized_keys If it didn’t work, you may have to create a id_rsa.pub file in C:\\Users&lt;USER&gt;./ssh directory.3.Test the connection.ssh &lt;UBUNTU_USER&gt;@&lt;IP_UBUNTU&gt;ReferencesHow to Use SCP Command to Securely Transfer FilesSSH exchange keys between Windows 10 and Linux" } ]
